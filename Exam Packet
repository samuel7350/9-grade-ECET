#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
using namespace std;

//FUNCTIONS PACKET
//---------------------------------------------------------------------------------------//

/*6.38 (Guess the Number Game) Write a program that plays the game of "guess the number"
as follows: Your program chooses the number to be guessed by selecting an integer at
random in the range 1 to 1000. The program then displays the following:

I have a number between 1 and 1000.
Can you guess my number?
Please type your first guess.

The player then types a first guess. The program responds with one of the following:

1. Excellent! You guessed the number!
Would you like to play again (y or n)?
2. Too low. Try again.
3. Too high. Try again.

If the player's guess is incorrect, your program should loop until the player finally gets
the number right. Your program should keep telling the player Too high or Too low to
help the player "zero in" on the correct answer.
*/


int main()
{
	int guess;
	char again;
	srand(time(0));

	do{
		int count = 0;
		cout << "I have a number between 1 and 1000." << endl
			<< "Can you guess my number?\n"
			"Please type your first guess: " << endl;

		int random = 1 + (rand() % 1000);

		do{
			cin >> guess;
			if (guess < random)
				cout << "Too low. Try again." << endl;
			if (guess > random)
				cout << "Too high. Try again." << endl;
			count += 1;
		} while (guess != random);

		cout << "Congratulations, you guessed correct! \nIt took you " << count << " tries \nPlay again? (Y or N)" << endl;
		cin >> again;
		cout << endl;
	} while (again == 'Y' || again == 'y');

}


/*6.34 Write a program that simulates coin tossing. For each toss of the coin, the program
	should print Heads or Tails. Let the program toss the coin 100 times and count the
	number of times each side of the coin appears. Print the results. The program should call
	a separate function flip that takes no arguments and returns 0 for tails and 1 for heads.
	[Note: If the program realistically simulates the coin tossing, then each side of the coin
	should appear approximately half the time.] */
int flip();
int main()
{
	srand(time(0));
	for (int i = 0; i < 100; i++)
	{
		cout << "Coin Toss: ";
		if (flip() == 0)
			cout << "Tails" << endl;
		else
			cout << "Heads" << endl;
	}
	
}

int flip()
{
	
	if (rand() % 2 == 0)
		return 0;
	else
		return 1;

}

/*6.29 (Perfect Numbers) An integer is said to be a perfect number if the sum of its factors,
including 1 (but not the number itself), is equal to the number. For example, 6 is a
perfect number, because 6 = 1 + 2 + 3. Write a function perfect that determines
whether parameter number is a perfect number. Use this function in a program that
determines and prints all the perfect numbers between 1 and 1000. Print the factors of
each perfect number to confirm that the number is indeed perfect. Challenge the power
of your computer by testing numbers much larger than 1000.  */

int perfect(int x);
int main()
{
	int x = 2;
	for (x; x <= 10000; x++)
	{
		if (perfect(x) == 1)
		{
			cout << x << ": ";
			for (int i = 1; i < x; i++)
			{
				if (x % i == 0)
					cout << i << " ";
			}
			cout << endl;
		}
		if (x == 1001)
			cout << endl << "More than 1000:" << endl;
	}
	cout << endl;
}
int perfect(int x)
{
	int sum = 0;
	for (int i = 1; i < x; i++)
	{
		if (x % i == 0)
			sum += i;
	}

	if (sum == x)
		return 1;
	else
		return 0;
}

//CONTROL P1
//-----------------------------------------------------------------------------------------------//

/*4.26 A palindrome is a number or a text phrase that reads the same backwards as
forwards. For example, each of the following five-digit integers is a palindrome:
12321, 55555, 45554 and 11611. Write a program that reads in a five-digit integer
and determines whether it is a palindrome. [Hint: Use the division and modulus
operators to separate the number into its individual digits.] */

int main()
{
	char again;
	do
	{
	int pal;
	int og;
	int myarray[5] = { 0 };
	bool ans = true;
	
	
		cout << "Test: ";
		cin >> og;
		pal = og;
		int hold = 0;

		for (int i = 0; i < 5; i++)
		{
			hold = pal % 10;
			myarray[i] = hold;
			pal = pal / 10;
		}

		cout << "** debug ** ";
		for (int i = 0; i < 5; i++)
		{
			cout << myarray[i];
		}

		cout << endl;

		if (myarray[0] == myarray[4])
		{
			if (myarray[1] == myarray[3])
				ans = true;
			else
				ans = false;
		}
		else
			ans = false;

		if (ans == true)
			cout << og << " is a palindrome." << endl;
		else
			cout << og << " is not a palindrome." << endl;
		cout << "Test again? (Y / N)" << endl;
		cin >> again;
	} while (again == 'Y' || again == 'y');
}

int main()
{
/*4.27 Input an integer containing only 0s and 1s (i.e., a "binary" integer) and print its
decimal equivalent. Use the modulus and division operators to pick off the "binary"
number's digits one at a time from right to left. Much as in the decimal number
system, where the rightmost digit has a positional value of 1, the next digit left has
a positional value of 10, then 100, then 1000, and so on, in the binary number
system the rightmost digit has a positional value of 1, the next digit left has a
positional value of 2, then 4, then 8, and so on. Thus the decimal number 234 can
be interpreted as 2 * 100 + 3 * 10 + 4 * 1. The decimal equivalent of binary 1101 is
1 * 1 + 0 * 2 + 1 * 4 + 1 * 8 or 1 + 0 + 4 + 8, or 13.*/

	char again;

	do
	{
		int binary = 0;
		int hold = 0;
		int num = 0;
		int x = 0;
		int total = 0;
		int power = 1;

		cout << "Binary number: ";
		cin >> binary;
		hold = binary;

		while (hold != 0)
		{
			hold = hold / 10;
			num += 1;
		}

		for (int i = 0; i < num; i++)
		{
			power = pow(2, i);
			x = binary % 10;
			total = total + (x * power);
			binary /= 10;
		}
		cout << "Decimal equivalent: " << total << endl << endl;
		cout << "Find the decimal equivalent of another number? (Y / N)" << endl;
		cin >> again;
		cout << endl;
	} while (again == 'Y' || again == 'y');
}

int main()
{
/*4.34 (Cryptography) A company wants to transmit data over the telephone, but is
concerned that its phones could be tapped. All of the data are transmitted as fourdigit
integers. The company has asked you to write a program that encrypts the data
so that it can be transmitted more securely. Your program should read a four-digit
integer and encrypt it as follows: Replace each digit by (the sum of that digit plus 7)
modulus 10. Then, swap the first digit with the third, swap the second digit with the
fourth and print the encrypted integer. Write a separate program that inputs an
encrypted fourdigit integer and decrypts it to form the original number. */

//Encryption
//**********//
int message = 0;
int hold = 0;
int x = 0;
int myarray[4] = { 0 };
int encrypted[4] = { 0 };
int k = 3;

cout << "Your message: ";
cin >> message;
hold = message;

for (int i = 0; i < 4; i++)
{
	x = hold % 10;
	myarray[i] = x;
	hold = hold / 10;
}

for (int i = 0; i < 4; i++)
{
	x = myarray[i];
	x = x + 7;
	x = x % 10;
	encrypted[k] = x;
	k--;
}

int swap = encrypted[0];
encrypted[0] = encrypted[2];
encrypted[2] = swap;

swap = encrypted[1];
encrypted[1] = encrypted[3];
encrypted[3] = swap;

cout << "The encrypted message: ";
for (int i = 0; i < 4; i++)
{
	cout << encrypted[i];
}
hold = message;

for (int i = 0; i < 4; i++)
{
	x = hold % 10;
	myarray[i] = x;
	hold = hold / 10;
}

cout << endl;

//Decryption
//**********//
int dmessage;
int decrypted[4] = { 0 };
int recrypted[4] = { 0 };
cout << endl << "What is the encrypted message?: ";
cin >> dmessage;

hold = dmessage;

int j = 3;
for (int i = 0; i < 4; i++)
{
	x = hold % 10;
	decrypted[j] = x;
	hold = hold / 10;
	j--;
}

swap = decrypted[0];
decrypted[0] = decrypted[2];
decrypted[2] = swap;

swap = decrypted[1];
decrypted[1] = decrypted[3];
decrypted[3] = swap;

for (int i = 0; i < 4; i++)
{
	x = decrypted[i];
	x = x + 3;
	if (x > 9)
		x = x - 10;
	recrypted[i] = x;
}

cout << "The original message was: ";

for (int i = 0; i < 4; i++)
{
	cout << recrypted[i];
}
cout << endl;
}

//ARRAYS
//-----------------------------------------------------------------------------------------------//

int main()
{
/*7.11 (Bubble Sort) In the bubble sort algorithm, smaller values gradually "bubble" their
way upward to the top of the array like air bubbles rising in water, while the larger
values sink to the bottom. The bubble sort makes several passes through the array.
On each pass, successive pairs of elements are compared. If a pair is in increasing
order (or the values are identical), we leave the values as they are. If a pair is in
decreasing order, their values are swapped in the array. Write a program that sorts
an array of 10 integers using bubble sort. */

	int myArray[10] = { 0 };

	for (int i = 0; i < 10; i++){
		cin >> myArray[i];
	}

	for (int i = 0; i < (10 - 1); i++){
		for (int j = 0; j < (10 - 1); j++){
			if (myArray[j] > myArray[j + 1])
				swap(myArray[j], myArray[j + 1]);
		}
	}
	
	for (int x = 0; x < 10; x++)
		cout << myArray[x] << endl;

}

