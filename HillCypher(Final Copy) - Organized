#include <iostream>
#include <fstream>
#include <iomanip>
#include <time.h>
#include <cstdlib>
#include <stdio.h>
#include <vector>
#include <string>
#include <time.h>
#include <sstream>
#include <math.h>
#define SIZE 3
using namespace std;

/*
*********************************************************************************************************************************************
*/

void randKey(float [SIZE][SIZE]);
vector<int> Message();
float determinant(float [SIZE][SIZE]);
vector<float> inverse(float [SIZE][SIZE], int);
int** transposegenerator(float [SIZE][SIZE]);
void outputkey(ofstream&);
ofstream createtxt();
ifstream openfile();
void Decrypt();
vector<float> getkey(ifstream&);
vector<int> MatrixMultiply(float [SIZE][SIZE], vector<int>);
vector<int> sizecheck(vector<int>);
vector<int> fetch(ifstream&);
vector<int> MatrixMultiplyDecode(float [SIZE][SIZE], vector<int>);
void Encrypt();
void intro();
//TEMPLATE FOR OUTPUTTING VECTORS
/*********************************************************************/

template <typename T>
ostream & operator << (ostream &out, const vector<T> &v)
{
	size_t last = v.size() - 1;
	for(size_t i = 0; i < v.size(); i++)
	{
		out << v[i];
		if (i != last)
		out << endl;				//Use this to change what is between the Vectors (between the double quotes) Right now its 1 space between each value
	}
	return out;
}
//Prints Different Colors upon call
//example
//cout << colorname << variable/text;
enum COLORS
{
    	black,
	blue,
	green,
	cyan,
	red,
	magenta,
	brown,
	normal,
	darkgrey,
	lightblue,
	lightgreen,
	lightcyan,
	lightred,
	lightmagenta,
	yellow,
	white
};

ostream& operator << (ostream &textcolor, const COLORS &Color)
{
    HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(out, Color);
    return(textcolor);
}

/*********************************************************************/

float key[SIZE][SIZE];					//Global - We Need these Keys Everywhere
float decryptkey[3][3];
string filename = "";					//Need this For a lot too
stringstream overflow;					//Takes in all Overflow
string sht;						//Does nothing
//Main Below

int main()
{ //Main
	intro();
	char choose;
	cout << "Would you like to Encrypt or Decrypt? \nE - Encrypt\nD - Decrypt\n\t\t\t\t\t";
	cin >> choose;
	overflow << getline(cin, sht);
	if(choose == 'e' || choose == 'E')
	{
		Encrypt();
		cout << "Would You Like to Decrypt?\n";
		cin >> choose;
		overflow << getline(cin, sht);
		if(choose == 'y' || choose == 'Y')
			Decrypt();
	}
	if(choose == 'd' || choose == 'D')
	{
		Decrypt();
		cout << "Would You Like to Encrypt?\n";
		cin >> choose;
		overflow << getline(cin, sht);
		if(choose == 'y' || choose == 'Y')
			Encrypt();
	}
} //Main

void Encrypt()
{
	randKey(key);							//Calls the RandKey Function
	vector<int> a = Message();
	remove(filename.c_str());					//Deletes the File if It Already Exists
	ofstream Stuff = createtxt();
	outputkey(Stuff);
	a = MatrixMultiply(key, a);
	Stuff << endl 
		  << a 
		  << endl;
	Stuff.close();
}
vector<int> Message()
{
	vector<int> a;
	std::string message = "";
	while(true)
	{
		cin.ignore();
		cout << "Please Enter the Message to Be Encrypted. \n";
		getline(cin, message);				//Asks for the message they want to encrypt
		if(!message.empty())
			{
				system("CLS");
				break;
			}
			else
			{
				continue;
			}
	}
	char choose;
	cout << "Would you Like to See a List of the Text Files in the Current Directory? (Y/N)";
	cin >> choose;
	overflow << getline(cin, sht);
	if(choose == 'y' || choose == 'Y')
	{
		system("dir *.txt /a-d /b");
		cout << "Would you like to delete all these files?(y/n): ";
		cin >> choose;
		overflow << getline(cin, sht);
		if(choose =='y' || choose == 'Y')
		{
			cout << "ARE YOU SURE??\n";
			cin >> choose;
			overflow << getline(cin, sht);
			if(choose =='y' || choose == 'Y')
			{
				string c = "del /Q ";
				string p = "*.txt";
				system(c.append(p).c_str());
			}
		}
	}
	else
	{
		cout << "Would You like to Clear the Current Folder of ALL Text Files (Y/N): ";
		cin >> choose;
		overflow << getline(cin, sht);
		if(choose =='y' || choose == 'Y')
		{
			cout << "ARE YOU SURE??\n";
			cin >> choose;
			overflow << getline(cin, sht);
			if(choose =='y' || choose == 'Y')
			{
				string c = "del /Q ";
				string p = "*.txt";
				system(c.append(p).c_str());
			}
		}
	}
	while(true)
	{
		system("CLS");
		cout << "Please Enter the Desired Filename(Please Exclude the .txt at the end)\n[MAX LENGTH = 128]:\n----> ";
		getline(cin, filename);
		filename += ".txt";
		if(!filename.empty())
				{
					system("CLS");
					cout << "Your Filename is: \n" << filename << endl;
					cout << "And your Message is: \n" << message << endl;
					system("PAUSE");
					break;
				}
				else
				{
					continue;
				}
	}
		
	for (int count = 0; count < message.length(); count++)   //takes each character of the message
	{
		char y = message.at(count);
		a.push_back(static_cast<int>(y));
	}
	a = sizecheck(a);
	return a;
}
void randKey(float key[SIZE][SIZE])
{
	srand(time(0));

	for(int i = 0; i < SIZE; i++)
		for(int j = 0; j < SIZE; j++)
			key[i][j] = rand() % 9 + 1;

}
float determinant(float key[SIZE][SIZE])
{
	int det = 0;
	for(int i = 0; i < SIZE; i++)
		{
		det = 
			det + 
				(
				key[0][i] * 
				(
					key [1][(i + 1) % SIZE] * 
					key [2][(i + 2) % SIZE] - 
					key [1][(i + 2) % SIZE] * 
					key [2][(i + 1) % SIZE]
				)
				);
		}
	return det;
}
vector<float> inverse(float k[SIZE][SIZE], float det)
{
	vector<float> s;
	stringstream test;
	long double key[3][3];
	long double t[3][3] = {0};
	for(int i = 0; i < 3; i++)
		for(int j = 0; j < 3; j++)
			key[i][j] = k[j][i];
	test << setprecision(100) << (key[1][1] * key[2][2]) - (key[2][1] * key[1][2]);
	test >> t[0][0];
	test.clear();
	test << setprecision(100) << -((key[1][0] * key[2][2]) - (key[2][0] * key[1][2]));
	test >> t[0][1];
	test.clear();
	test << setprecision(100) << (key[1][0] * key[2][1]) - (key[1][1] * key[2][0]);
	test >> t[0][2];
	test.clear();
	test << setprecision(100) << -((key[0][1] * key[2][2]) - (key[2][1] * key[0][2]));
	test >> t[1][0];
	test.clear();
	test << setprecision(100) << (key[0][0] * key[2][2]) - (key[2][0] * key[0][2]);
	test >> t[1][1];
	test.clear();
	test << setprecision(100) << -((key[0][0] * key[2][1]) - (key[2][0] * key[0][1]));
	test >> t[1][2];
	test.clear();
	test << setprecision(100) << (key[0][1] * key[1][2]) - (key[1][1] * key[0][2]);
	test >> t[2][0];
	test.clear();
	test << setprecision(100) << -((key[0][0] * key[1][2]) - (key[1][0] * key[0][2]));
	test >> t[2][1];
	test.clear();
	test << setprecision(100) << (key[0][0] * key[1][1]) - (key[1][0] * key[0][1]);
	test >> t[2][2];
	test.clear();
	for(int i = 0; i < 3; i++)
	{
		for(int j = 0; j < 3; j++)
		{
			test.clear();
			test << setprecision(100) << t[i][j] * (1/det);
			test >> t[i][j];
			cout << t[i][j] << " ";
			s.push_back(t[i][j]);
		}
		cout << endl;
	}
	return s;
}
void outputkey(ofstream& Stuff)
{	
	for(int i = 0; i < SIZE; i++)
	{ //Outer for
		for(int j = 0; j < SIZE; j++)
		{ //Inner for
			Stuff << key[i][j];					//OutPuts the Matrix into the TextFile
		} //Inner for
	} //Outer for

}
ofstream createtxt()
{
	//********************************************
		ofstream Stuff;						//****			Makes The Text File
		Stuff.open(filename.c_str(), ios::app);//*
	//********************************************
		return Stuff;
}
void Decrypt()
{
	system("CLS");
	ifstream EncodedM = openfile();
	vector<float> filekey;
	filekey = getkey(EncodedM);
	int a = 0;
	for(int i = 0; i < 3; i++)
	{
		for(int j = 0; j < 3; j++)
		{
			decryptkey[i][j] = filekey.at(j + a);
		}
		a += 3;
	}
	float det = determinant(decryptkey);
	filekey.empty();
	vector<int> fromfile;
	fromfile = fetch(EncodedM);
	cout << fromfile;
	vector<float> tempinv;
	tempinv = inverse(decryptkey, det);
	float inversekey[3][3];
	int q = 0;
	system("CLS");
	for(int i = 0; i < 3; i++)
	{
		for(int j = 0; j < 3; j++)
		{
			inversekey[i][j] = tempinv[q];
			q++;
		}
	}
	vector<int> answer;
	answer = MatrixMultiply(inversekey, fromfile);
	for(int i = 0; i < answer.size(); i++)
		cout << static_cast<char>(answer[i]);
	cout << endl;
	cout << "Would You Like to Store This into a .txt File?\n";
	string choose;
	cin >> choose;

	if(choose.at(0) == 'y' || choose.at(0) == 'Y')
	{
		string sht;
		string file;
		cout << "Please Enter the Filename You would like to store it in: ";
		overflow << getline(cin, sht);
		getline(cin, file);
		ofstream final;
		file += ".txt";
		final.open(file.c_str());
		for(int i = 0; i < answer.size(); i++)
			final << static_cast<char>(answer[i]);
		cout << "DONE!";
	}

}

ifstream openfile()
{
	string file;
		cout << "Here is a list of all the .txt files in the Directory.\n";
		system("dir *.txt /a-d /b");
	ifstream EncodedM;
	while(true)
	{
		cout << "Please Enter the FileName of your Encoded Text: ";
		getline(cin, file);
		if(file.length() == 0)
			getline(cin, file);
		EncodedM.open (file.c_str(),ifstream::in);
		if(EncodedM.good())
			break;
		if(EncodedM.fail())
		{
			cout << "CORRECTLY!!\n";
			continue;
		}
	}

	return EncodedM;
}

vector<float> getkey(ifstream& EncodedM)
{
		char c = EncodedM.get();
		vector<float> a;
		a.push_back(int(c) - 48);
		while (EncodedM.good())
		{
			c = EncodedM.get();
			a.push_back(int(c) - 48);
			if(a.size() == 10)
				break;
		}
		a.erase(a.end()-1, a.end());
		return a;
}

vector<int> MatrixMultiply(float key[3][3], vector<int> before)
{

	float total = 0;
	vector<int> after;

	while(before.size() != 0)
	{
		int q = 0;
		for (int i = 0; i < 3; i++)
		{
			for (int k = 0; k < 3; k++)
			{
				total += (key[i][k] * before[q]);  //mulitplies Key by matrix W
				q++;
			}
			int rounded = floor(total + 0.5);
											  //total oushed back into after
											  //although its not really a matrix yet.
			after.push_back(rounded);

			total = 0;
			q = 0;
		}
		total = 0;
		before.erase(before.begin(), before.begin() + 3);
	}
	return after;
}

vector<int> sizecheck(vector<int> test)
{
		if(test.size() % 3 != 0)
			test.push_back(0);
		if(test.size() % 3 != 0)
			test.push_back(0);
	return test;
}

vector<int> fetch(ifstream& EncodedM)
{
	int a;
	vector<int> b;
	while(EncodedM >> a)
	{
		b.push_back(a);
	}
	return b;
}

void intro()
{
	ShowWindow(GetConsoleWindow(), SW_MAXIMIZE);
	PlaySound(TEXT("GetLowRemix.wav"), NULL, SND_ASYNC);
	system("Color 1B");
	Sleep(1000);
	system("CLS");
	cout << "\n\t\t\t\tThe Matrix Machine";
	system("Color 2D");
	Sleep(1000);
	system("CLS");
	cout << "\n\n\t\t\t\tThe Matrix Machine";
	system("Color 3E");
	Sleep(1000);
	system("CLS");
	cout << "\n\n\n\t\t\t\tThe Matrix Machine";
	system("Color 4F");
	Sleep(1000);
	system("CLS");
	cout << "\n\n\n\n\t\t\t\tThe Matrix Machine";
	system("Color 5A");
	Sleep(1000);
	system("CLS");
	cout << "\n\n\n\n\n\t\t\t\tThe Matrix Machine";
	system("Color 6C");
	Sleep(1000);
	system("CLS");
	cout << "\n\n\n\n\n\n\t\t\t\tThe Matrix Machine\n";
	Sleep(1000);
	system("COLOR A7");
	cout << lightmagenta << "\t\t\t\t  Abhishek  Patel\n";
	Sleep(1000);
	system("COLOR FC");
	cout << white << "\t\t\t\t   Samuel Carlos\n";
	Sleep(1000);
	system("COLOR B3");
	cout << lightred <<  "\t\t\t\t    Julie Pirro\n";
	Sleep(1000);
	system("COLOR 08");
}
